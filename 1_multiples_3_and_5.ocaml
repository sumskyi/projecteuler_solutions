#use "topfind"
#camlp4o
#thread
#require "core.top"
#require "core.syntax"

open Core.Std;;

let top_range = ref 1_000;;
let speclist = [
  ("-d", Arg.Set_int top_range, ": top range parameter");
];;
let usage = "usage: " ^ Sys.argv.(0) ^ " [-d int]";;

(*
let rec print_list = function
  [] -> ()
  | e::l -> print_int e ; print_string " " ; print_list l
;;
*)

let three_or_five(n: int) : bool = n mod 3 = 0 || n mod 5 = 0 ;;

let numbers = List.range 0 !top_range;;

let filtered = List.filter ~f:three_or_five numbers;;
(*print_list filtered;;*)


(*
let list_sum filtered =
  List.fold ~init:0 ~f:(fun acc x -> acc + x) filtered;;
*)
let list_sum(l: int list) : int =
  List.fold_left ~f:(fun acc x -> acc + x) ~init:0 l
;;



(*print_endline @@ string_of_int @@ list_sum filtered;;*)

let print_int = Fn.compose print_endline string_of_int;;


(* shorter version: *)
let result n =
  let filtered_list =
    List.filter
    ~f:(fun n -> n mod 3 = 0 || n mod 5 = 0)
    (List.range 0 n)
  in list_sum filtered_list;;


let () =
  Arg.parse
    speclist
    (fun x -> raise (Arg.Bad ("Bad argument : " ^ x)))
    usage;

  print_int @@ result !top_range;
;;

